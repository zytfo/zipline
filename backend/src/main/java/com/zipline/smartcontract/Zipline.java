package com.zipline.smartcontract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Zipline extends Contract {
    public static final String BINARY = "{\"linkReferences\": {}, \"object\": \"0x60806040523480156200001157600080fd5b506040518060400160405280600781526020017f5a69706c696e65000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f5a495000000000000000000000000000000000000000000000000000000000008152508181620000986301ffc9a760e01b6200017660201b60201c565b620000b06380ac58cd60e01b6200017660201b60201c565b620000c863780e9d6360e01b6200017660201b60201c565b8151620000dd9060099060208501906200024a565b508051620000f390600a9060208401906200024a565b506200010c635b5e139f60e01b6200017660201b60201c565b505050506000620001226200024560201b60201c565b600d80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620002ec565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200020857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028d57805160ff1916838001178555620002bd565b82800160010185558215620002bd579182015b82811115620002bd578251825591602001919060010190620002a0565b50620002cb929150620002cf565b5090565b6200024791905b80821115620002cb5760008155600101620002d6565b6124c580620002fc6000396000f3fe6080604052600436106101c25760003560e01c80636352211e116100f757806395d89b4111610095578063c87b56dd11610064578063c87b56dd1461072e578063d0def52114610758578063e985e9c51461081b578063f2fde38b14610856576101c2565b806395d89b41146105d8578063a22cb465146105ed578063b88d4fde14610628578063c3662b28146106fb576101c2565b806370a08231116100d157806370a0823114610566578063715018a6146105995780638da5cb5b146105ae5780638f32d59b146105c3576101c2565b80636352211e146105125780636c0360eb1461053c578063703a8ff714610551576101c2565b806318160ddd116101645780632f745c591161013e5780632f745c59146104575780633ccfd60b1461049057806342842e0e146104a55780634f6ccce7146104e8576101c2565b806318160ddd1461039157806323b872dd146103b85780632db25e05146103fb576101c2565b8063081812fc116101a0578063081812fc146102b8578063095ea7b3146102fe57806309ec6cc7146103375780630c493fba14610361576101c2565b806301ffc9a7146101c757806302d2838b1461020f57806306fdde031461022e575b600080fd5b3480156101d357600080fd5b506101fb600480360360208110156101ea57600080fd5b50356001600160e01b031916610889565b604080519115158252519081900360200190f35b61022c6004803603602081101561022557600080fd5b50356108ac565b005b34801561023a57600080fd5b50610243610a23565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027d578181015183820152602001610265565b50505050905090810190601f1680156102aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102c457600080fd5b506102e2600480360360208110156102db57600080fd5b5035610aba565b604080516001600160a01b039092168252519081900360200190f35b34801561030a57600080fd5b5061022c6004803603604081101561032157600080fd5b506001600160a01b038135169060200135610b1f565b34801561034357600080fd5b5061022c6004803603602081101561035a57600080fd5b5035610c4d565b34801561036d57600080fd5b5061022c6004803603604081101561038457600080fd5b5080359060200135610d48565b34801561039d57600080fd5b506103a6610e1e565b60408051918252519081900360200190f35b3480156103c457600080fd5b5061022c600480360360608110156103db57600080fd5b506001600160a01b03813581169160208101359091169060400135610e24565b34801561040757600080fd5b506104256004803603602081101561041e57600080fd5b5035610e83565b604080516001600160a01b03909516855260208501939093528383019190915215156060830152519081900360800190f35b34801561046357600080fd5b506103a66004803603604081101561047a57600080fd5b506001600160a01b038135169060200135610eee565b34801561049c57600080fd5b5061022c610f70565b3480156104b157600080fd5b5061022c600480360360608110156104c857600080fd5b506001600160a01b03813581169160208101359091169060400135610fb5565b3480156104f457600080fd5b506103a66004803603602081101561050b57600080fd5b5035610fd0565b34801561051e57600080fd5b506102e26004803603602081101561053557600080fd5b5035611039565b34801561054857600080fd5b50610243611096565b34801561055d57600080fd5b506103a66110f7565b34801561057257600080fd5b506103a66004803603602081101561058957600080fd5b50356001600160a01b031661110b565b3480156105a557600080fd5b5061022c611176565b3480156105ba57600080fd5b506102e261121c565b3480156105cf57600080fd5b506101fb61122b565b3480156105e457600080fd5b50610243611251565b3480156105f957600080fd5b5061022c6004803603604081101561061057600080fd5b506001600160a01b03813516906020013515156112b2565b34801561063457600080fd5b5061022c6004803603608081101561064b57600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561068657600080fd5b82018360208201111561069857600080fd5b803590602001918460018302840111640100000000831117156106ba57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506113ba945050505050565b34801561070757600080fd5b506103a66004803603602081101561071e57600080fd5b50356001600160a01b031661141b565b34801561073a57600080fd5b506102436004803603602081101561075157600080fd5b503561142d565b34801561076457600080fd5b506103a66004803603604081101561077b57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156107a657600080fd5b8201836020820111156107b857600080fd5b803590602001918460018302840111640100000000831117156107da57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506115fc945050505050565b34801561082757600080fd5b506101fb6004803603604081101561083e57600080fd5b506001600160a01b0381358116916020013516611630565b34801561086257600080fd5b5061022c6004803603602081101561087957600080fd5b50356001600160a01b031661165e565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b6108b46120d9565b506000818152600f6020908152604091829020825160808101845281546001600160a01b0316815260018201549281019290925260028101549282019290925260039091015460ff161515606082018190526109525760408051600160e51b62461bcd0281526020600482015260126024820152600160711b712a3930b2329034b9903737ba1027b832b71702604482015290519081900360640190fd5b806040015134101561099857604051600160e51b62461bcd0281526004018080602001828103825260238152602001806122be6023913960400191505060405180910390fd5b80516001600160a01b031660009081526011602090815260409091208054340190558101516109ca90309033906116c6565b6000828152600f60209081526040808320600301805460ff1916905580518581529182019290925281517f7af5b1698d1c38003579edd6a4590416adb86caf7ffb9243986287b02383eeda929181900390910190a15050565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610aaf5780601f10610a8457610100808354040283529160200191610aaf565b820191906000526020600020905b815481529060010190602001808311610a9257829003601f168201915b505050505090505b90565b6000610ac5826116e5565b610b0357604051600160e51b62461bcd02815260040180806020018281038252602c81526020018061236c602c913960400191505060405180910390fd5b506000908152600260205260409020546001600160a01b031690565b6000610b2a82611039565b9050806001600160a01b0316836001600160a01b03161415610b8057604051600160e51b62461bcd02815260040180806020018281038252602181526020018061241c6021913960400191505060405180910390fd5b806001600160a01b0316610b92611702565b6001600160a01b03161480610bb35750610bb381610bae611702565b611630565b610bf157604051600160e51b62461bcd0281526004018080602001828103825260388152602001806122e16038913960400191505060405180910390fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610c556120d9565b506000818152600f6020908152604091829020825160808101845281546001600160a01b03168082526001830154938201939093526002820154938101939093526003015460ff16151560608301523314610ce457604051600160e51b62461bcd0281526004018080602001828103825260268152602001806122486026913960400191505060405180910390fd5b8060600151610d355760408051600160e51b62461bcd0281526020600482015260126024820152600160711b712a3930b2329034b9903737ba1027b832b71702604482015290519081900360640190fd5b6109ca30826000015183602001516116c6565b610d53333084610e24565b6000610d5f6010611706565b6040805160808101825233815260208082018781528284018781526001606085018181526000888152600f90955295909320935184546001600160a01b0319166001600160a01b0390911617845590519183019190915551600282015590516003909101805460ff19169115159190911790559050610dde601061170a565b604080518281526001602082015281517f7af5b1698d1c38003579edd6a4590416adb86caf7ffb9243986287b02383eeda929181900390910190a1505050565b60075490565b610e35610e2f611702565b82611713565b610e7357604051600160e51b62461bcd02815260040180806020018281038252603181526020018061243d6031913960400191505060405180910390fd5b610e7e8383836116c6565b505050565b600080600080610e916120d9565b50505060009283525050600f6020908152604091829020825160808101845281546001600160a01b03168082526001830154938201849052600283015494820185905260039092015460ff16151560609091018190529093919291565b6000610ef98361110b565b8210610f3957604051600160e51b62461bcd02815260040180806020018281038252602b8152602001806121c5602b913960400191505060405180910390fd5b6001600160a01b0383166000908152600560205260409020805483908110610f5d57fe5b9060005260206000200154905092915050565b33600081815260116020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015610fb1573d6000803e3d6000fd5b5050565b610e7e838383604051806020016040528060008152506113ba565b6000610fda610e1e565b821061101a57604051600160e51b62461bcd02815260040180806020018281038252602c81526020018061246e602c913960400191505060405180910390fd5b6007828154811061102757fe5b90600052602060002001549050919050565b6000818152600160205260408120546001600160a01b03168061109057604051600160e51b62461bcd0281526004018080602001828103825260298152602001806123436029913960400191505060405180910390fd5b92915050565b600b8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610aaf5780601f10610a8457610100808354040283529160200191610aaf565b600060016111056010611706565b03905090565b60006001600160a01b03821661115557604051600160e51b62461bcd02815260040180806020018281038252602a815260200180612319602a913960400191505060405180910390fd5b6001600160a01b038216600090815260036020526040902061109090611706565b61117e61122b565b6111d25760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600d546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600d80546001600160a01b0319169055565b600d546001600160a01b031690565b600d546000906001600160a01b0316611242611702565b6001600160a01b031614905090565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610aaf5780601f10610a8457610100808354040283529160200191610aaf565b6112ba611702565b6001600160a01b0316826001600160a01b031614156113235760408051600160e51b62461bcd02815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060046000611330611702565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155611374611702565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b6113cb6113c5611702565b83611713565b61140957604051600160e51b62461bcd02815260040180806020018281038252603181526020018061243d6031913960400191505060405180910390fd5b611415848484846117ba565b50505050565b60116020526000908152604090205481565b6060611438826116e5565b61147657604051600160e51b62461bcd02815260040180806020018281038252602f8152602001806123ed602f913960400191505060405180910390fd5b6000828152600c602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084526060939283018282801561150b5780601f106114e05761010080835404028352916020019161150b565b820191906000526020600020905b8154815290600101906020018083116114ee57829003601f168201915b505050505090508051600014156115325750506040805160208101909152600081526108a7565b600b8160405160200180838054600181600116156101000203166002900480156115935780601f10611571576101008083540402835291820191611593565b820191906000526020600020905b81548152906001019060200180831161157f575b5050825160208401908083835b602083106115bf5780518252601f1990920191602091820191016115a0565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150506108a7565b600080611609600e611706565b9050611615848261180f565b61161f818461182c565b611629600e61170a565b9392505050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b61166661122b565b6116ba5760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6116c381611892565b50565b6116d1838383611936565b6116db8382611a80565b610e7e8282611b75565b6000908152600160205260409020546001600160a01b0316151590565b3390565b5490565b80546001019055565b600061171e826116e5565b61175c57604051600160e51b62461bcd02815260040180806020018281038252602c815260200180612292602c913960400191505060405180910390fd5b600061176783611039565b9050806001600160a01b0316846001600160a01b031614806117a25750836001600160a01b031661179784610aba565b6001600160a01b0316145b806117b257506117b28185611630565b949350505050565b6117c58484846116c6565b6117d184848484611bb3565b61141557604051600160e51b62461bcd0281526004018080602001828103825260328152602001806121f06032913960400191505060405180910390fd5b6118198282611df7565b6118238282611b75565b610fb181611f2e565b611835826116e5565b61187357604051600160e51b62461bcd02815260040180806020018281038252602c815260200180612398602c913960400191505060405180910390fd5b6000828152600c602090815260409091208251610e7e9284019061210c565b6001600160a01b0381166118da57604051600160e51b62461bcd0281526004018080602001828103825260268152602001806122226026913960400191505060405180910390fd5b600d546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600d80546001600160a01b0319166001600160a01b0392909216919091179055565b826001600160a01b031661194982611039565b6001600160a01b03161461199157604051600160e51b62461bcd0281526004018080602001828103825260298152602001806123c46029913960400191505060405180910390fd5b6001600160a01b0382166119d957604051600160e51b62461bcd02815260040180806020018281038252602481526020018061226e6024913960400191505060405180910390fd5b6119e281611f72565b6001600160a01b0383166000908152600360205260409020611a0390611fad565b6001600160a01b0382166000908152600360205260409020611a249061170a565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216600090815260056020526040812054611aaa90600163ffffffff611fc416565b600083815260066020526040902054909150808214611b45576001600160a01b0384166000908152600560205260408120805484908110611ae757fe5b906000526020600020015490508060056000876001600160a01b03166001600160a01b031681526020019081526020016000208381548110611b2557fe5b600091825260208083209091019290925591825260069052604090208190555b6001600160a01b0384166000908152600560205260409020805490611b6e90600019830161218a565b5050505050565b6001600160a01b0390911660009081526005602081815260408084208054868652600684529185208290559282526001810183559183529091200155565b6000611bc7846001600160a01b0316612006565b611bd3575060016117b2565b600060606001600160a01b038616600160e11b630a85bd0102611bf4611702565b89888860405160240180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611c6d578181015183820152602001611c55565b50505050905090810190601f168015611c9a5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909a16999099178952518151919890975087965094509250829150849050835b60208310611d025780518252601f199092019160209182019101611ce3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d64576040519150601f19603f3d011682016040523d82523d6000602084013e611d69565b606091505b509150915081611dbd57805115611d835780518082602001fd5b604051600160e51b62461bcd0281526004018080602001828103825260328152602001806121f06032913960400191505060405180910390fd5b6000818060200190516020811015611dd457600080fd5b50516001600160e01b031916600160e11b630a85bd01021493506117b292505050565b6001600160a01b038216611e555760408051600160e51b62461bcd02815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b611e5e816116e5565b15611eb35760408051600160e51b62461bcd02815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b600081815260016020908152604080832080546001600160a01b0319166001600160a01b038716908117909155835260039091529020611ef29061170a565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600780546000838152600860205260408120829055600182018355919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880155565b6000818152600260205260409020546001600160a01b0316156116c357600090815260026020526040902080546001600160a01b0319169055565b8054611fc090600163ffffffff611fc416565b9055565b600061162983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061203f565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906117b2575050151592915050565b600081848411156120d157604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561209657818101518382015260200161207e565b50505050905090810190601f1680156120c35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b604051806080016040528060006001600160a01b0316815260200160008152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061214d57805160ff191683800117855561217a565b8280016001018555821561217a579182015b8281111561217a57825182559160200191906001019061215f565b506121869291506121aa565b5090565b815481835581811115610e7e57600083815260209020610e7e9181019083015b610ab791905b8082111561218657600081556001016121b056fe455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737354726164652063616e2062652063616e63656c6c6564206f6e6c7920627920706f737465722e4552433732313a207472616e7366657220746f20746865207a65726f20616464726573734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e546865206275796572206861736e27742073656e7420656e6f756768206d6f6e65792e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732314d657461646174613a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473a165627a7a723058207df37daf8a9d7630a03541900f583f3898b42c908dd8181eb718d87a62fe2acd0029\", \"sourceMap\": \"311:3612:0:-;;;539:52;8:9:-1;5:2;;;30:1;27;20:12;5:2;539:52:0;456:155:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;533:4;539:6;718:40:9;385:10;737:20;;718:18;;;:40;;:::i;:::-;2262::14;2136:10;2281:20;;2262:18;;;:40;;:::i;:::-;1357:51:15;1172:10;1376:31;;1357:18;;;:51;;:::i;:::-;912:12:17;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;934:16:17;;;;:7;;:16;;;;;:::i;:::-;;1038:49;774:10;1057:29;;1038:18;;;:49;;:::i;:::-;840:254;;456:155:16;;698:17:12;718:12;:10;;;:12;;:::i;:::-;740:6;:18;;-1:-1:-1;;;;;;740:18:12;-1:-1:-1;;;;;740:18:12;;;;;;;;773:43;;740:18;;-1:-1:-1;740:18:12;-1:-1:-1;;773:43:12;;-1:-1:-1;;773:43:12;664:159;311:3612:0;;1442:190:9;1517:25;;;;;;1509:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1585:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1585:40:9;1621:4;1585:40;;;1442:190::o;788:96:7:-;867:10;788:96;;:::o;311:3612:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;311:3612:0;;;-1:-1:-1;311:3612:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;\"}";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_BASEURI = "baseURI";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC__PENDINGWITHDRAWALS = "_pendingWithdrawals";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_GETLASTTRADEID = "getLastTradeId";

    public static final String FUNC_GETTRADE = "getTrade";

    public static final String FUNC_OPENTRADE = "openTrade";

    public static final String FUNC_EXECUTETRADE = "executeTrade";

    public static final String FUNC_CANCELTRADE = "cancelTrade";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event TRADESTATUSCHANGE_EVENT = new Event("TradeStatusChange",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected Zipline(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Zipline(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Zipline(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Zipline(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX,
                Arrays.<Type>asList(new Address(160, owner),
                new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final Function function = new Function(FUNC_TOKENBYINDEX,
                Arrays.<Type>asList(new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> baseURI() {
        final Function function = new Function(FUNC_BASEURI,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final Function function = new Function(FUNC_ISOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String to, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new Address(160, to),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final Function function = new Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> _pendingWithdrawals(String param0) {
        final Function function = new Function(FUNC__PENDINGWITHDRAWALS,
                Arrays.<Type>asList(new Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI,
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new Address(160, owner),
                new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<TradeStatusChangeEventResponse> getTradeStatusChangeEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRADESTATUSCHANGE_EVENT, transactionReceipt);
        ArrayList<TradeStatusChangeEventResponse> responses = new ArrayList<TradeStatusChangeEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TradeStatusChangeEventResponse typedResponse = new TradeStatusChangeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ad = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TradeStatusChangeEventResponse> tradeStatusChangeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TradeStatusChangeEventResponse>() {
            @Override
            public TradeStatusChangeEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRADESTATUSCHANGE_EVENT, log);
                TradeStatusChangeEventResponse typedResponse = new TradeStatusChangeEventResponse();
                typedResponse.log = log;
                typedResponse.ad = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TradeStatusChangeEventResponse> tradeStatusChangeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRADESTATUSCHANGE_EVENT));
        return tradeStatusChangeEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, String tokenURI) {
        final Function function = new Function(
                FUNC_MINT,
                Arrays.<Type>asList(new Address(160, to),
                new Utf8String(tokenURI)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getLastTradeId() {
        final Function function = new Function(FUNC_GETLASTTRADEID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, Boolean>> getTrade(BigInteger tradeId) {
        final Function function = new Function(FUNC_GETTRADE,
                Arrays.<Type>asList(new Uint256(tradeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple4<String, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, Boolean>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> openTrade(BigInteger item, BigInteger price) {
        final Function function = new Function(
                FUNC_OPENTRADE,
                Arrays.<Type>asList(new Uint256(item),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> executeTrade(BigInteger tradeId, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_EXECUTETRADE,
                Arrays.<Type>asList(new Uint256(tradeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelTrade(BigInteger tradeId) {
        final Function function = new Function(
                FUNC_CANCELTRADE,
                Arrays.<Type>asList(new Uint256(tradeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw() {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Zipline load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Zipline(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Zipline load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Zipline(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Zipline load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Zipline(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Zipline load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Zipline(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Zipline> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Zipline.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Zipline> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Zipline.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Zipline> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Zipline.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Zipline> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Zipline.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class TradeStatusChangeEventResponse extends BaseEventResponse {
        public BigInteger ad;

        public Boolean status;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }
}
